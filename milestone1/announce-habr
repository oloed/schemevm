Я могу писать программы на псевдокоде и превращать их в PHP-код. Или в переносимый Си. Или ещё во что-нибудь. Список будет пополняться.

Часть проекта, которая «превращать в PHP», готова не полностью. Но я пишу статью уже сейчас, чтобы:

* узнать, кому ещё интересен проект
* спросить у опытных пхпшников, как улучшить мой PHP-код и как померять, что именно тормозит.

___пример и технические детали под хаброкатом___

Пример программы:

:: (display "Hello, world!\n")

Или посложней:

:: (define (сделать-писателя что-писать)
::   (lambda () (display что-писать)))
:: (define пиши-привет (сделать-писателя "Привет!\n"))
:: (пиши-привет)

В этом примере функция возвращает функцию. На PHP код выглядел бы так (не работает):

:: function сделать_писателя($что_писать) {
::   return function () {
::     print $что_писать;
::   }
:: }
:: $пиши_привет = сделать_писателя("Привет!\n");
:: $пиши_привет();

На остальные примеры можно посмотреть ___на github___ или ___в архиве___. Тесты проверяют, что работает

* хоть что-то (пример "Hello, world")
* рекурсия (факториал, фибоначчи, аккерманн)
* замыкания
* продолжения

Все важные вещи работают. До полной реализации стандарта R5RS остаётся только наделать примитивов. Ах да, совершенно случайно мой псевдокод совпадает с языком Scheme R5RS.

Для своего проекта я использую компилятор Схемы ___Gambit___. Внутри него — регистрово-стековая виртуальная машина GVM ("___статья___"). Вот, во что превращается наш пример, когда оказывается в GVM:

+N регистр номер N
-N ячейка N фрейма стека
Параметры функций: первый в +1, второй в +2 и т.д.
Результат функции возвращается в +1

